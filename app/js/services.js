// Generated by CoffeeScript 1.7.1
var mkmobileServices;

mkmobileServices = angular.module('mkmobileServices', ['ngResource']);

mkmobileServices.factory('MkmApi', [
  '$resource', '$location', 'DataCache', function($resource, $location, DataCache) {
    var api, apiURL, auth, generateOAuthHeader, parseRangeHeader, redirectAfterLogin;
    parseRangeHeader = function(headers) {
      if (headers().range != null) {
        return parseInt(headers().range.replace(/^.*\//, ''), 10);
      } else {
        return 0;
      }
    };
    generateOAuthHeader = function(config) {
      var param, paramOrder, params, salt, signature, signatureParams, _i, _len;
      params = {
        realm: config.url,
        oauth_consumer_key: auth.consumerKey,
        oauth_nonce: Math.random().toString(36).substr(2) + Math.random().toString(36).substr(2),
        oauth_signature_method: "HMAC-SHA1",
        oauth_timestamp: new Date().getTime(),
        oauth_token: auth.token,
        oauth_version: "1.0",
        oauth_signature: ""
      };
      paramOrder = ["oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_token", "oauth_version"];
      signatureParams = [];
      for (_i = 0, _len = paramOrder.length; _i < _len; _i++) {
        param = paramOrder[_i];
        signatureParams.push(param + "=" + params[param]);
      }
      signature = [config.method, encodeURIComponent(params.realm), encodeURIComponent(signatureParams.join("&"))].join("&");
      salt = encodeURIComponent(auth.consumerSecret) + "&" + encodeURIComponent(auth.secret);
      console.log("output", signature, salt);
      signature = CryptoJS.HmacSHA1(signature, salt);
      params.oauth_signature = signature.toString(CryptoJS.enc.Base64);
      return 'OAuth realm="' + params.realm + '", oauth_version="' + params.oauth_version + '", oauth_timestamp="' + params.oauth_timestamp + '", oauth_nonce="' + params.oauth_nonce + '", oauth_consumer_key="' + params.oauth_consumer_key + '", oauth_token="' + params.oauth_token + '", oauth_signature_method="' + params.oauth_signature_method + '", oauth_signature="' + params.oauth_signature + '"';
    };
    apiURL = 'https://www.mkmapi.eu/ws/bra1n/a042b2e17c5cba981d6f684ec338b98a/output.json';
    auth = {
      consumerKey: "alb03sLPpFNAhi6f",
      consumerSecret: "HTIcbso87X22JdS3Yk89c2CojfZiNDMX",
      token: "",
      secret: ""
    };
    redirectAfterLogin = false;
    api = $resource(apiURL + '/:type/:param1/:param2/:param3/:param4/:param5', {}, {
      search: {
        params: {
          type: "products",
          param2: "1",
          param3: "1",
          param4: "false"
        },
        unique: "search",
        oauth: generateOAuthHeader.bind(this)
      },
      articles: {
        params: {
          type: "articles"
        },
        cache: false
      },
      product: {
        params: {
          type: "product"
        }
      },
      access: {
        method: 'POST',
        params: {
          type: "access"
        },
        headers: {
          'Content-type': 'application/xml'
        },
        oauth: generateOAuthHeader.bind(this)
      }
    });
    return {
      search: function(query, response) {
        if (response == null) {
          response = {
            count: 0,
            products: []
          };
        }
        if (query) {
          response.loading = true;
          api.search({
            param1: query,
            param5: response.products.length + 1
          }, function(data, headers) {
            var _ref, _ref1;
            if ((_ref = data.product) != null) {
              _ref.map(function(val) {
                return DataCache.product(val.idProduct, val);
              });
            }
            response.count = parseRangeHeader(headers) || ((_ref1 = data.product) != null ? _ref1.length : void 0);
            if (response.count) {
              response.products = response.products.concat(data.product);
            }
            return response.loading = false;
          });
        }
        return response;
      },
      product: function(id) {
        var response;
        response = {
          product: DataCache.product(id)
        };
        if (response.product == null) {
          api.product({
            param1: id
          }, function(data) {
            return response.product = DataCache.product(id, data.product);
          });
        }
        return response;
      },
      articles: function(id, response) {
        if (response == null) {
          response = {
            count: 0,
            articles: []
          };
        }
        response.loading = true;
        api.articles({
          param1: id,
          param2: response.articles.length + 1
        }, function(data, headers) {
          var _ref;
          response.count = parseRangeHeader(headers) || ((_ref = data.article) != null ? _ref.length : void 0);
          if (response.count) {
            response.articles = response.articles.concat(data.article);
          }
          return response.loading = false;
        });
        return response;
      },
      isLoggedIn: function() {
        if (auth.token === "") {
          redirectAfterLogin = $location.path();
          $location.path('/login');
        }
        return auth.token !== "";
      },
      getLoginURL: function() {
        return apiURL + '/authenticate/' + auth.consumerKey;
      },
      getAccess: function(requestToken) {
        var payload;
        payload = '<?xml version="1.0" encoding="UTF-8" ?><request><app_key>' + auth.consumerKey + '</app_key> <request_token>' + requestToken + '</request_token></request>';
        return api.access(payload, function(data) {
          return console.log(data);
        });
      }
    };
  }
]);

mkmobileServices.factory('DataCache', [
  '$cacheFactory', function($cacheFactory) {
    var cache;
    cache = {
      product: $cacheFactory('products', {
        capacity: 500
      })
    };
    return {
      product: function(id, data) {
        if (data != null) {
          cache.product.put(id, data);
        }
        if (id != null) {
          return cache.product.get(id);
        }
      }
    };
  }
]);

//# sourceMappingURL=services.map
