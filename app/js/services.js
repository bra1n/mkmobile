// Generated by CoffeeScript 1.7.1
var mkmobileServices;

mkmobileServices = angular.module('mkmobileServices', ['ngResource']);

mkmobileServices.factory('MkmApi', [
  '$resource', '$location', 'DataCache', '$http', function($resource, $location, DataCache, $http) {
    var api, apiURL, loggedIn, parseRangeHeader, redirectAfterLogin;
    apiURL = '/api';
    api = $resource(apiURL + '/:type/:param1/:param2/:param3/:param4/:param5', {}, {
      search: {
        params: {
          type: "products",
          param2: "1",
          param3: "1",
          param4: "false"
        },
        unique: "search"
      },
      articles: {
        params: {
          type: "articles"
        },
        cache: false
      },
      product: {
        params: {
          type: "product"
        }
      }
    });
    parseRangeHeader = function(headers) {
      if (headers().range != null) {
        return parseInt(headers().range.replace(/^.*\//, ''), 10);
      } else {
        return 0;
      }
    };
    loggedIn = false;
    redirectAfterLogin = false;
    return {
      search: function(query, response) {
        if (response == null) {
          response = {
            count: 0,
            products: []
          };
        }
        if (query) {
          response.loading = true;
          api.search({
            param1: query,
            param5: response.products.length + 1
          }, function(data, headers) {
            var _ref, _ref1;
            if ((_ref = data.product) != null) {
              _ref.map(function(val) {
                return DataCache.product(val.idProduct, val);
              });
            }
            response.count = parseRangeHeader(headers) || ((_ref1 = data.product) != null ? _ref1.length : void 0);
            if (response.count) {
              response.products = response.products.concat(data.product);
            }
            return response.loading = false;
          });
        }
        return response;
      },
      product: function(id) {
        var response;
        response = {
          product: DataCache.product(id)
        };
        if (response.product == null) {
          api.product({
            param1: id
          }, function(data) {
            return response.product = DataCache.product(id, data.product);
          });
        }
        return response;
      },
      articles: function(id, response) {
        if (response == null) {
          response = {
            count: 0,
            articles: []
          };
        }
        response.loading = true;
        api.articles({
          param1: id,
          param2: response.articles.length + 1
        }, function(data, headers) {
          var _ref;
          response.count = parseRangeHeader(headers) || ((_ref = data.article) != null ? _ref.length : void 0);
          if (response.count) {
            response.articles = response.articles.concat(data.article);
          }
          return response.loading = false;
        });
        return response;
      },
      isLoggedIn: function() {
        if (!loggedIn) {
          redirectAfterLogin = $location.path();
          $location.path('/login');
        }
        return loggedIn;
      },
      login: function() {
        return $http({
          method: 'POST',
          url: 'https://www.mkmapi.eu/ws/authenticate',
          headers: {
            'Content-type': 'application/xml'
          },
          data: '<?xml version="1.0" encoding="UTF-8" ?><request><app_key>alb03sLPpFNAhi6f</app_key><callback_uri>http://mobile.local/?requestToken=</callback_uri></request>'
        }).success(function(data, status) {
          return console.log(data, status);
        }).error(function(data, status) {
          return console.error(data, status);
        });
      }
    };
  }
]);

mkmobileServices.factory('DataCache', [
  '$cacheFactory', function($cacheFactory) {
    var cache;
    cache = {
      product: $cacheFactory('products', {
        capacity: 500
      })
    };
    return {
      product: function(id, data) {
        if (data != null) {
          cache.product.put(id, data);
        }
        if (id != null) {
          return cache.product.get(id);
        }
      }
    };
  }
]);

//# sourceMappingURL=services.map
