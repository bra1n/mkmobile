// Generated by CoffeeScript 1.7.1
var generateOAuthHeader, mkmobileApp;

mkmobileApp = angular.module('mkmobileApp', ['ngRoute', 'ngAnimate', 'mkmobileControllers', 'mkmobileFilters', 'mkmobileServices', 'mkmobileDirectives']);

mkmobileApp.config([
  '$locationProvider', '$routeProvider', function($locationProvider, $routeProvider) {
    $locationProvider.html5Mode(true);
    return $routeProvider.when('/', {
      templateUrl: '/partials/home.html',
      controller: 'HomeCtrl'
    }).when('/search', {
      templateUrl: '/partials/search.html',
      controller: 'SearchCtrl'
    }).when('/settings', {
      templateUrl: '/partials/settings.html',
      controller: 'SettingsCtrl'
    }).when('/login', {
      templateUrl: '/partials/login.html',
      controller: 'SearchCtrl'
    }).when('/product/:productId', {
      templateUrl: '/partials/product.html',
      controller: 'ProductCtrl'
    }).when('/callback', {
      templateUrl: '/partials/callback.html',
      controller: 'CallbackCtrl'
    }).otherwise({
      redirectTo: '/'
    });
  }
]);

generateOAuthHeader = function(config) {
  var auth, param, paramOrder, params, salt, signature, signatureParams, _i, _len;
  auth = config.oauth;
  params = {
    realm: config.url,
    oauth_consumer_key: auth.consumerKey,
    oauth_nonce: Math.random().toString(36).substr(2) + Math.random().toString(36).substr(2),
    oauth_signature_method: "HMAC-SHA1",
    oauth_timestamp: Math.round(new Date().getTime() / 1000),
    oauth_token: auth.token,
    oauth_version: "1.0",
    oauth_signature: ""
  };
  paramOrder = ["oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_token", "oauth_version"];
  signatureParams = [];
  for (_i = 0, _len = paramOrder.length; _i < _len; _i++) {
    param = paramOrder[_i];
    signatureParams.push(param + "=" + params[param]);
  }
  signature = [config.method, encodeURIComponent(params.realm), encodeURIComponent(signatureParams.join("&"))].join("&");
  salt = encodeURIComponent(auth.consumerSecret) + "&" + encodeURIComponent(auth.secret);
  console.log("building oauth headers", auth, signature, salt);
  signature = CryptoJS.HmacSHA1(signature, salt);
  params.oauth_signature = signature.toString(CryptoJS.enc.Base64);
  return 'OAuth realm="' + params.realm + '", oauth_version="' + params.oauth_version + '", oauth_timestamp="' + params.oauth_timestamp + '", oauth_nonce="' + params.oauth_nonce + '", oauth_consumer_key="' + params.oauth_consumer_key + '", oauth_token="' + params.oauth_token + '", oauth_signature_method="' + params.oauth_signature_method + '", oauth_signature="' + params.oauth_signature + '"';
};

mkmobileApp.config([
  '$httpProvider', function($httpProvider) {
    $httpProvider.defaults.useXDomain = true;
    $httpProvider.defaults.cache = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];
    return $httpProvider.interceptors.push([
      '$q', function($q) {
        var uniqueRequests;
        uniqueRequests = {};
        return {
          request: function(config) {
            var _ref;
            if (config.unique) {
              if ((_ref = uniqueRequests[config.unique]) != null) {
                _ref.resolve();
              }
              uniqueRequests[config.unique] = $q.defer();
              config.timeout = uniqueRequests[config.unique].promise;
            }
            if (config.oauth != null) {
              config.headers.Authorization = generateOAuthHeader(config);
            }
            return config || $q.when(config);
          }
        };
      }
    ]);
  }
]);

mkmobileApp.run([
  '$rootScope', function($rootScope) {
    return $rootScope.$on('$routeChangeSuccess', function(event, current) {
      var _ref;
      return $rootScope.viewClass = (_ref = current.$$route) != null ? _ref.templateUrl.replace(/(^.*\/|\.html$)/ig, '') : void 0;
    });
  }
]);

//# sourceMappingURL=app.map
